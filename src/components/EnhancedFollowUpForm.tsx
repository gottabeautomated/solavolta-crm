import React from 'react'
import type { EnhancedFollowUp, EnhancedFollowUpPriority, EnhancedFollowUpType } from '../types/status'
import { useLeads } from '../hooks/useLeads'
import { useAuth } from '../hooks/useAuth'

interface Props {
  open: boolean
  onClose: () => void
  onSave: (payload: Omit<EnhancedFollowUp, 'id' | 'created_at'> & Partial<Pick<EnhancedFollowUp, 'id'>>) => Promise<void>
  initial?: EnhancedFollowUp | null
}

const TYPE_OPTIONS: EnhancedFollowUpType[] = ['call', 'offer_followup', 'meeting', 'custom']
const PRIORITY_OPTIONS: EnhancedFollowUpPriority[] = ['low', 'medium', 'high', 'overdue']
const TYPE_LABELS: Record<EnhancedFollowUpType, string> = {
  call: 'Anruf',
  offer_followup: 'Angebots-Nachfassung',
  meeting: 'Termin',
  custom: 'Sonstiges',
}
const PRIORITY_LABELS: Record<EnhancedFollowUpPriority, string> = {
  low: 'Niedrig',
  medium: 'Mittel',
  high: 'Hoch',
  overdue: 'Überfällig',
}

export function EnhancedFollowUpForm({ open, onClose, onSave, initial }: Props) {
  const { leads } = useLeads()
  const { activeTenantId } = useAuth()
  const [leadId, setLeadId] = React.useState<string>('')
  const [type, setType] = React.useState<EnhancedFollowUpType>('call')
  const [dueDate, setDueDate] = React.useState<string>('')
  const [priority, setPriority] = React.useState<EnhancedFollowUpPriority>('medium')
  const [autoGenerated, setAutoGenerated] = React.useState<boolean>(false)
  const [escalationLevel, setEscalationLevel] = React.useState<number>(0)
  const [notes, setNotes] = React.useState<string>('')
  const [submitting, setSubmitting] = React.useState(false)
  const [error, setError] = React.useState<string | null>(null)

  React.useEffect(() => {
    if (!open) return
    setError(null)
    if (initial) {
      setLeadId(initial.lead_id)
      setType(initial.type)
      setDueDate(initial.due_date?.slice(0, 10))
      setPriority(initial.priority)
      setAutoGenerated(initial.auto_generated)
      setEscalationLevel(initial.escalation_level)
      setNotes(initial.notes || '')
    } else {
      // defaults
      setLeadId(leads[0]?.id || '')
      setType('call')
      setDueDate(new Date().toISOString().slice(0, 10))
      setPriority('medium')
      setAutoGenerated(false)
      setEscalationLevel(0)
      setNotes('')
    }
  }, [open, initial, leads])

  if (!open) return null

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!activeTenantId) { setError('Kein aktiver Mandant'); return }
    if (!leadId) { setError('Bitte Lead wählen'); return }
    setSubmitting(true)
    setError(null)
    try {
      const payload: Omit<EnhancedFollowUp, 'id' | 'created_at'> & Partial<Pick<EnhancedFollowUp, 'id'>> = {
        ...(initial ? { id: initial.id } : {}),
        tenant_id: activeTenantId,
        lead_id: leadId,
        type,
        due_date: dueDate,
        priority,
        auto_generated: autoGenerated,
        escalation_level: escalationLevel,
        completed_at: initial?.completed_at ?? null,
        notes: notes || null,
      }
      await onSave(payload)
      onClose()
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Speichern fehlgeschlagen')
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <div className="fixed inset-0 z-[3000] flex items-center justify-center">
      <div className="absolute inset-0 bg-black/40" onClick={() => !submitting && onClose()} />
      <div className="relative z-[3001] pointer-events-auto bg-white rounded shadow-lg p-4 w-full max-w-lg">
        <h3 className="text-lg font-semibold">{initial ? 'Follow-up bearbeiten' : 'Follow-up anlegen'}</h3>
        <form className="mt-4 space-y-3" onSubmit={handleSubmit}>
          <div>
            <label className="block text-sm text-gray-700 mb-1">Lead</label>
            <select value={leadId} onChange={e => setLeadId(e.target.value)} className="w-full border rounded px-2 py-2 text-sm">
              {leads.map(l => (
                <option key={l.id} value={l.id}>{l.name || l.email || l.phone || l.id}</option>
              ))}
            </select>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <label className="block text-sm text-gray-700 mb-1">Typ</label>
              <select value={type} onChange={e => setType(e.target.value as EnhancedFollowUpType)} className="w-full border rounded px-2 py-2 text-sm">
                {TYPE_OPTIONS.map(t => <option key={t} value={t}>{TYPE_LABELS[t]}</option>)}
              </select>
            </div>
            <div>
              <label className="block text-sm text-gray-700 mb-1">Fällig am</label>
              <input type="date" value={dueDate} onChange={e => setDueDate(e.target.value)} className="w-full border rounded px-2 py-2 text-sm" />
            </div>
            <div>
              <label className="block text-sm text-gray-700 mb-1">Priorität</label>
              <select value={priority} onChange={e => setPriority(e.target.value as EnhancedFollowUpPriority)} className="w-full border rounded px-2 py-2 text-sm">
                {PRIORITY_OPTIONS.map(p => <option key={p} value={p}>{PRIORITY_LABELS[p]}</option>)}
              </select>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="checkbox" checked={autoGenerated} onChange={e => setAutoGenerated(e.target.checked)} />
              Automatisch erzeugt
            </label>
            <div>
              <label className="block text-sm text-gray-700 mb-1">Eskalationsstufe</label>
              <input type="number" value={escalationLevel} onChange={e => setEscalationLevel(parseInt(e.target.value || '0', 10))} className="w-full border rounded px-2 py-2 text-sm" />
            </div>
          </div>
          <div>
            <label className="block text-sm text-gray-700 mb-1">Notizen</label>
            <textarea value={notes} onChange={e => setNotes(e.target.value)} rows={3} className="w-full border rounded px-2 py-2 text-sm" />
          </div>
          {error && <div className="text-sm text-red-600">{error}</div>}
          <div className="flex justify-end gap-2">
            <button type="button" className="px-3 py-2 border rounded text-sm" onClick={onClose} disabled={submitting}>Abbrechen</button>
            <button type="submit" className="px-3 py-2 bg-blue-600 text-white rounded text-sm" disabled={submitting}>{initial ? 'Speichern' : 'Anlegen'}</button>
          </div>
        </form>
      </div>
    </div>
  )
}


